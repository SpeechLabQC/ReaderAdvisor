# Display the Configuration Window
# Format : className.variable = value

##################
# Message Values #
##################
# --- This values can only be updated when the 'reload properties button is clicked' --- #
# Messages that the GUI will display when reading and errors are produced
repeatReadingLinePanel.errorMessage = Please read the line again!!!
repeatReadingLinePanel.numberOfMessagesToBeRepeated = 2
repeatReadingLinePanel.isMessagesToBeRepeated = false
# Displays the number of repetitions left in the pop-up window of the error message
repeatReadingLinePanel.displayNumberOfRepetitionsLeft = false

##########################
# Configuration Settings #
##########################
# --- This values can only be updated when the software is restarted --- #
# --- This is done by storing the value of this configuration in a local variable and read its value on going forward --- #
# --- Also, by using reading the values of this configuration in an initialization function such as the constructor (or others) --- #
# This reload button will upload the message values - It should reload all values in the GUI
configurationWindow.displayReloadPropertiesButton = true
# Display the Configuration window for the user to adjust the configurations - Useful for adjusting configurations
configurationWindow.display = true
# Disable all other windows when the Configuration window is active - Prevents the user from modifying the values while reading is in progress
configurationWindow.disableWindowOnReading = true
# Display the window to play audio files
menuBar.openAudio = true

#######################################
# Speech Manager Configuration Values #
#######################################
# Configuration to load for the Speech Manager - Sphinx
#----------- Language Model -----------#
# JSGFGrammar -> Uses the .gram file
# NGramModel  -> Uses the binaries .DMP and .lm files
sphinx.languageModel = NGramModel
# TODO: Make the default configuration file a read-only file to prevent the user from accidentally deleting it
speechManager.speechConfiguration.JSGFGrammar = config/JSGFGrammar.config.xml
speechManager.speechConfiguration.NGramModel  = config/NGramModel.config.xml
# Executable directories
# Leave the path separator as '/' because '\' is difficult to perform using regex
statisticalLanguageModelUtils.win32 = bin/win32
statisticalLanguageModelUtils.batch = createLanguageModel.bat
statisticalLanguageModelUtils.unix  = bin/unix
statisticalLanguageModelUtils.mac   = bin/mac
statisticalLanguageModelUtils.shell = createLanguageModel.command
# Grammar file Name
#speechManager.GRAMMAR = readerAdvisor
# This folder is create and delete when the program is running
# Directory where the temporary grammar will be stored
# This directory should matched the directory created for the config.xml sphinx file
statisticalLanguageModelUtils.deleteFilesOnClose = true
# Display the Audio Wave Panel
audioPlayerWindow.displayVisualAudio = true

#######################################
#   Sphinx Configuration Properties   #
#######################################
# ---- This components should be defined in the sphinx.config.xml file --- #
liveRecognizer.sphinx.component.propertySheet = windower
liveRecognizer.sphinx.component.frontEnd = mfcFrontEnd

#######################################
#  Override directories - IDE help    #
#######################################
# --- This are the directories that an IDE will use when running the software --- #
# --- Provide the absolute path where the icon directory is located --- #
#EnvironmentUtils.iconDirectory = file:/C:/Dev/ReaderAdvisor/icon/

#######################################
# Folders to be created to store data #
#######################################
# -------------- AUDIO DIRECTORY -------------- #
# Directory where the audio files will be stored
saveAudioFilePanel.audioDirectory = audio
# Record audio files while recognizing data
saveAudioFilePanel.recordAudio = true
# Set the property to Delete the audio directory
# true - Delete the directory when the program exits successfully
# false - Do not delete the directory when the program exits successfully
# It does not delete recursively - therefore if there is stored after its create it will do not delete the directory
saveAudioFilePanel.audioDirectoryDeleteOnExit = false
# Audio type - { wav/wave, aifc, aif/aiff, au, snd }
saveAudioFilePanel.audioType = wave
#----------- Sphinx Configuration -----------#
sphinxConfigurationPanel.delayTimeInMilliSeconds = 600
